import React, { useState, useEffect } from 'react';
import { TextField, Button, Box, Typography, Alert, Select, MenuItem } from '@mui/material';
import BaseService from '../BaseService';
import { Base, VectorStore } from '../models';
import { DataService } from '../services/DataService';

interface AddBaseProps {
  onAddBase: (newBase: Base) => void;
}

const AddBase: React.FC<AddBaseProps> = ({ onAddBase }) => {
  const [baseName, setBaseName] = useState<string>('');
  const [vectorStoreId, setVectorStoreId] = useState<string>('');
  const [vectorStores, setVectorStores] = useState<VectorStore[]>([]); // List of vector stores
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const vectorDataService = new DataService<VectorStore>('vectorstores');

  useEffect(() => {
    // Fetch vector stores when the component mounts
    const fetchVectorStores = async () => {
      try {
        const fetchedVectorStores = await vectorDataService.getAll();
        setVectorStores(fetchedVectorStores);
      } catch (error) {
        console.error('Error fetching vector stores:', error);
        setError('Failed to fetch vector stores');
      }
    };

    fetchVectorStores();
  }, []);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null);
    setSuccess(null);

    const baseData: Base = {
      baseId: '', // ID will be generated by the server
      ownerId: '', // Owner ID should be set appropriately
      baseName,
      vectorStoreId, // Use the selected vector store ID
      createdAt: Date.now(),
    };

    try {
      const baseService = new BaseService();
      const newBase = await baseService.createBase(baseData);
      onAddBase(newBase);
      setSuccess('Base created successfully!');
      setBaseName('');
      setVectorStoreId('');
    } catch (error) {
      console.error('Error creating base:', error);
      setError('Failed to create base');
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit} 
    sx={{
      mt: 3,
      width: '100%', // Set the width to 100% of the parent container
      maxWidth: 600, // Add a maximum width for better layout
      mx: 'left', // Center the box horizontally
      backgroundColor: 'background.paper', // Add background color
      p: 3, // Add padding for better spacing
      borderRadius: 2, // Add rounded corners
      boxShadow: 3, // Add a shadow for better visual appearance
    }}    
    >
      <Typography variant="h4" gutterBottom>
        Add Base
      </Typography>
      {error && <Alert severity="error">{error}</Alert>}
      {success && <Alert severity="success">{success}</Alert>}
      <TextField
        label="Base Name"
        value={baseName}
        onChange={(e) => setBaseName(e.target.value)}
        fullWidth
        margin="normal"
        required
      />
      <Select
        label="Vector Store"
        value={vectorStoreId}
        onChange={(e) => setVectorStoreId(e.target.value)}
        fullWidth
        required
      >
        {vectorStores.map((store) => (
          <MenuItem key={store.vectorStoreId} value={store.vectorStoreId}>
            {store.embedingVendorName}::{store.embedingModeName}::{store.embedingModeDimensions}
          </MenuItem>
        ))}
      </Select>
      <Button type="submit" variant="contained" color="primary" sx={{ mt: 2 }}>
        Add Base
      </Button>
    </Box>
  );
};

export default AddBase;