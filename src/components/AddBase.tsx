import React, { useState } from 'react';
import { TextField, Button, Box, Typography, Alert } from '@mui/material';
import BaseService from '../BaseService';
import { Base } from '../models';

interface AddBaseProps {
  onAddBase: (newBase: Base) => void;
}

const AddBase: React.FC<AddBaseProps> = ({ onAddBase }) => {
  const [baseName, setBaseName] = useState<string>('');
  const [modelName, setModelName] = useState<string>('');
  const [dimensions, setDimensions] = useState<number>(0);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null);
    setSuccess(null);

    const baseData: Base = {
      baseId: '', // ID will be generated by the server
      ownerId: '', // Owner ID should be set appropriately
      baseName,
      modelName,
      dimensions,
      createdAt: 0,
    };

    try {
      const baseService = new BaseService();
      const newBase = await baseService.createBase(baseData);
      onAddBase(newBase);
      setSuccess('Base created successfully!');
      setBaseName('');
      setModelName('');
      setDimensions(0);
    } catch (error) {
      console.error('Error creating base:', error);
      setError('Failed to create base');
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit} sx={{ mt: 3 }}>
      <Typography variant="h4" gutterBottom>
        Add New Base
      </Typography>
      {error && <Alert severity="error">{error}</Alert>}
      {success && <Alert severity="success">{success}</Alert>}
      <TextField
        label="Base Name"
        value={baseName}
        onChange={(e) => setBaseName(e.target.value)}
        fullWidth
        margin="normal"
        required
      />
      <TextField
        label="Model Name"
        value={modelName}
        onChange={(e) => setModelName(e.target.value)}
        fullWidth
        margin="normal"
        required
      />
      <TextField
        label="Dimensions"
        type="number"
        value={dimensions}
        onChange={(e) => setDimensions(Number(e.target.value))}
        fullWidth
        margin="normal"
        required
      />
      <Button type="submit" variant="contained" color="primary" sx={{ mt: 2 }}>
        Add Base
      </Button>
    </Box>
  );
};

export default AddBase;